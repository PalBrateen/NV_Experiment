The issue is a deadlock between the camera acquisition and the pulse blaster trigger. The steps followed previously as follows, everything happening serially:

1. Camera capture begins in the continuous mode
2. A loop is started to control whatever happens below for all the scan points
3. Set the required instruments and pulse blaster with the necessary parameters
4. Camera waits for a trigger pulse with certain timeout time
5. The pulse blaster is instructed to run
(cannot interchange 2 and 3 since the signal and reference frmaes might get mixed up)
6. As the camera waits now, the trigger comes and the frame acquisition begins for the stipulated number of frames at a particular scan point.
7. The scan point is changed and the loop runs again...

The deadlock happens at 2 when the camera waits for the trigger and the pulseblaster cannot run until the camera timeouts and the control moves to the next line of code...

The issue can be handled by synchronizing the triggering and the acquisition using threads. The plan is as follows and is almost done:
- Camera capture begins in the continuous mode
- Two threads are used: one is the original/main thread (camera acquisition thread) where the program ran till now + a new thread for controlling the pulse blaster output.

- The main (camera acquisition thread) does the following:
(This is actually the main thread that selects the ROI at the beginning and sets up the measurement sequence. Once those preliminary things are done, a separate thread is created for the pulse generation...)
    a. Starts a loop for acquiring frames for all the scan points
    b. waits for the trigger (pulse blaster) to start in the other thread
    c. Camera waits for a trigger pulse with certain timeout time
    (trigger should arrive since there are two different threads)
    d. captures the stipulated # frames for one scan point
    e. stops the pulse blaster trigger
    f. changes the scan point and loops again
    g. store everything and save the data

- The pulse blaster thread works as follows:
    a. A loop: It loops over the # scan points
    b. sets the instruments and PB with the required parameters for the scan point.
    c. pulse sequence starts only if the PB was stopped previously so that the frame acquisition does not start haphazardly (i.e. if (e) happens in the camera thread)
    d. start the pulse sequence when the above condition is met
    e. inform the other thread that the pulse generation has started
    f. wait for the frame acquisition to complete in the other thread
    g. change the scan point and loop over the above...
    h. stop
